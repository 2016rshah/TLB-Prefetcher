#include "cache.h"
#include "divergence.h"
#include "champsim.h"
#include "block.h"
#include <vector>

Divergence *diverge = new Divergence();

void CACHE::tlb_prefetcher_initialize() 
{

}

// this is the trigger for a prefetcher
void CACHE::tlb_prefetcher_operate(uint32_t cpu, uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type)
{
	diverge->update_corr_map(addr);
}

// when a requested line is filled (may cause eviction)  
void CACHE::tlb_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr)
{

}

void CACHE::tlb_prefetcher_final_stats()
{
	printf("\nTLB prefetcher final stats\n");
	std::map<uint64_t, uint64_t> histogram = diverge->get_histogram_results();
	printf("#correlated pages, #instances\n");	
	for (auto element: histogram) {
		printf("%ld, %ld\n", element.first, element.second);
	}
}
