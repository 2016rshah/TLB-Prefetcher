#include "cache.h"
#include "pc_history.h"
#include "champsim.h"
#include "block.h"
#include <vector>

uint64_t S = 2;
PC_HISTORY pc_history(S);

uint64_t num_redundant = 0;
uint64_t total_prefetches = 0;

void CACHE::tlb_prefetcher_initialize() 
{

}

PACKET make_packet(uint32_t cpu, uint64_t pf_addr) {
   PACKET pf_packet;
   pf_packet.fill_level = FILL_L2;
   pf_packet.cpu = cpu;
   pf_packet.address = pf_addr >> LOG2_PAGE_SIZE; // this gets rid of the lower 0s
   pf_packet.full_addr = pf_addr;
   pf_packet.ip = 0; // prefetch gets dummy ip of zero
   pf_packet.type = PREFETCH;
   pf_packet.event_cycle = current_core_cycle[cpu]; 
   return pf_packet;
}

// this is the trigger for a prefetcher
void CACHE::tlb_prefetcher_operate(uint32_t cpu, uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type)
{
	if (cache_hit) {
		return; // only handle miss stream
	}
	std::vector<uint64_t> predicted = pc_history.find_prefetch_addrs(addr, ip);
	uint64_t instr_id = 0; 
	
	for (uint64_t prediction : predicted) {
		if (prediction <= 0) {
			continue;
		}
	  
		PACKET packet = make_packet(cpu, prediction);
		uint32_t set = get_set(packet.address);
		int way = check_hit(&packet);
		total_prefetches++; 
	  
		if(way != -1) {
			num_redundant++; 
			continue; 
		}
		uint64_t pa = va_to_pa(cpu, instr_id, packet.full_addr, packet.address, 1); 
		packet.data = pa >> LOG2_PAGE_SIZE;  

		way = find_victim(cpu, instr_id, set, block[set], 0, packet.full_addr, PREFETCH);
	  
		pf_issued++; 
		fill_cache(set, way, &packet);
	}
}

// when a requested line is filled (may cause eviction)  
void CACHE::tlb_prefetcher_cache_fill(uint32_t cpu, uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr)
{

}

void CACHE::tlb_prefetcher_final_stats()
{
	printf("\nTLB prefetcher final stats\n");
	printf("\tredundant prefetches vs total calculated:");
	printf("\t%ld of %ld\n", num_redundant, total_prefetches); 	
}
