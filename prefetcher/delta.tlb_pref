#include "cache.h"
#include "delta.h"
#include <vector>

uint64_t S = 2;
Delta delta(S);

void CACHE::tlb_prefetcher_initialize() 
{

}

// this is the trigger for a prefetcher
void CACHE::tlb_prefetcher_operate(uint32_t cpu, uint64_t addr, uint64_t ip, uint8_t cache_hit, uint8_t type)
{
	// TODO: is the addr here the v addr? 
	std::vector<uint64_t> predicted = delta.find_prefetch_addrs(addr);
	// TODO: prefetch tlb
	// for each prediction
	//   probe cache
	//   if already in cache continue
	//   else
	//     va_to_pa
	//     set = get_set(prediction)
	//     way = find_victim(cpu, instruction_id, set, *current_set, ip, prediction?, type)
	//     fill_cache(set, way, packet_of(prediction))
}

/*
make_packet() {
   PACKET pf_packet;
   pf_packet.fill_level = fill_level; // we can add a fill level for TLB? Or find a default null value
   pf_packet.cpu = cpu;
   //pf_packet.data_index = LQ.entry[lq_index].data_index;
   //pf_packet.lq_index = lq_index;
   pf_packet.address = pf_addr >> LOG2_BLOCK_SIZE;
   pf_packet.full_addr = pf_addr;
   //pf_packet.instr_id = LQ.entry[lq_index].instr_id;
   //pf_packet.rob_index = LQ.entry[lq_index].rob_index;
   pf_packet.ip = ip;
   pf_packet.type = PREFETCH;
   pf_packet.event_cycle = current_core_cycle[cpu];
}


 */

// when a requested line is filled (may cause eviction)  
void CACHE::tlb_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way, uint8_t prefetch, uint64_t evicted_addr)
{

}

void CACHE::tlb_prefetcher_final_stats()
{

}
